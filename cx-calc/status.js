    /*
    * updateMemoryStatusDisplay: –ü—Ä–æ–º–µ–Ω—è —Ü–≤–µ—Ç–∞ –Ω–∞ —Ñ–æ–Ω–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∑–æ–Ω–∞—Ç–∞
    * –ü—Ä–∏–µ–º–∞:
    *   - slot: –ù–æ–º–µ—Ä –Ω–∞ —Å–ª–æ—Ç–∞ –Ω–∞ –ø–∞–º–µ—Ç—Ç–∞ (1, 2, 3).
    *   - hasValue: –ë—É–ª–µ–≤–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç (true, –∞–∫–æ –∏–º–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç; false, –∞–∫–æ –µ –∏–∑—á–∏—Å—Ç–µ–Ω–∞).
    */
    function updateMemoryStatusDisplay(slot, hasValue) {
        const statusElement = document.getElementById(`statusArea${slot}`);
        if (statusElement) {
            statusElement.style.backgroundColor = hasValue ? "rgb(225, 250, 4)" : "#565749"; // –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω —Ü–≤—è—Ç
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∫–ª–∞–≤–∏—à—ä—Ç –∏–º–∞ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    function isMemoryKey(value) {
        return /^[1-9]$/.test(value) || ["*", "/", "-"].includes(value);
    }

    function memoryAdd(targetSlot, operation = "+") {
        const rawText = (levMode ? displaylv : display).textContent.trim();
        const cleanText = rawText.replace(/\s/g, '').replace(',', '.');
        let value = parseFloat(cleanText);
        if (isNaN(value)) value = 0;
        if (Mem[targetSlot] === undefined) Mem[targetSlot] = 0;
        switch (operation) {
            case "+":
            Mem[targetSlot] += value;
                console.log(`M+ –≤ Mem[${targetSlot}] ‚Üí +${value} = [${Mem}]`);
                updateMemoryStatusDisplay(targetSlot, true); // –ü—Ä–æ–º–µ–Ω—è —Ñ–æ–Ω–∞ –Ω–∞ —Å–≤–µ—Ç–ª–æ—Å–∏–Ω
                setTimeout(() => {
                    updateMemoryStatusDisplay(targetSlot, false); // –í—Ä—ä—â–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ñ–æ–Ω —Å–ª–µ–¥ —Ö —Å–µ–∫—É–Ω–¥–∏
                }, 300);
                break;
            case "-":
                Mem[targetSlot] -= value;
                console.log(`M‚àí –≤ Mem[${targetSlot}] ‚Üí ‚àí${value} = [${Mem}]`);
                updateMemoryStatusDisplay(targetSlot, true); // –ü—Ä–æ–º–µ–Ω—è —Ñ–æ–Ω–∞ –Ω–∞ —Å–≤–µ—Ç–ª–æ—Å–∏–Ω
                setTimeout(() => {
                    updateMemoryStatusDisplay(targetSlot, false); // –í—Ä—ä—â–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ñ–æ–Ω —Å–ª–µ–¥ —Ö —Å–µ–∫—É–Ω–¥–∏
                }, 300);
                break;
            case "0":
                Mem[targetSlot] = 0;
                console.log(`0 –≤ Mem[${targetSlot}] ‚Üí +${value} = [${Mem}]`);
            break;
            default:
                console.warn("‚ùó –ù–µ–ø–æ–∑–Ω–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è:", operation);
        }
        localStorage.setItem('CalcMem', JSON.stringify(Mem));
        const statusId = typeof targetSlot === "number" ? `statusArea${targetSlot}` : targetSlot;
        const status = document.getElementById(statusId);
        if (!status) {
            //console.warn(`updateStatus: –µ–ª–µ–º–µ–Ω—Ç —Å id '${statusId}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.`);
            return;
        }
        //console.log(`‚úîÔ∏è updateStatus(${statusId}):`, message);
        status.textContent = "M" + targetSlot;
        status.style.opacity = "1";
    }

    // –î–µ–π—Å—Ç–≤–∏—è—Ç–∞ –∑–∞ –ø–∞–º–µ—Ç
    function executeMemoryAction(value, statusArea) {
        switch (statusArea) {
            case 1:
            switch (value) {
                case "1": memoryAdd(1, "+"); break;
                case "4": memoryAdd(1, "-"); break;
                case "7": memoryAdd(1, "0"); clearStatus(statusArea); break;
            }
            break;
            case 2:
            switch (value) {
                case "2": memoryAdd(2, "+"); break;
                case "5": memoryAdd(2, "-"); break;
                case "8": memoryAdd(2, "0"); clearStatus(statusArea); break;
            }
            break;
            case 3:
            switch (value) {
                case "3": memoryAdd(3, "+"); break;
                case "6": memoryAdd(3, "-"); break;
                case "9": memoryAdd(3, "0"); clearStatus(statusArea); break;
            }
            break;
        }
    }

    //memoryShow: –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–≤–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –æ—Ç –¥–∞–¥–µ–Ω —Å–ª–æ—Ç –Ω–∞ –ø–∞–º–µ—Ç—Ç–∞ –≤ –≥–æ—Ä–Ω–∏—è –¥–∏—Å–ø–ª–µ–π, –±–µ–∑ –¥–∞ –≥–æ –ø—Ä–æ–º–µ–Ω—è
    function memoryShow(slot) {
        if (slot == 4) {
            const calculatorEl = document.getElementById("calculator");
            const newSkin = calculatorEl.src.includes("CalculatorA.png") ? "Calculator0.png" : "CalculatorA.png";
            calculatorEl.src = newSkin;

            // –ó–∞–ø–∞–∑–≤–∞–º–µ –Ω–æ–≤–∏—è —Å–∫–∏–Ω –≤ localStorage
            const settings = JSON.parse(localStorage.getItem('appSettings')) || {};
            settings.calculatorSkin = newSkin; // –ó–∞–ø–∞–∑–≤–∞–º–µ –∏–º–µ—Ç–æ –Ω–∞ —Ñ–∞–π–ª–∞
            localStorage.setItem('appSettings', JSON.stringify(settings));
            return;
        }
        if (Mem[slot] === undefined) {
            console.warn(`–ü–∞–º–µ—Ç Mem[${slot}] –µ –Ω–µ–¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∞.`);
            return;
        }
        const originalValue = displaylv.textContent; // –ó–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ levInput
        const originalEurValue = display.textContent; // –ó–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ eurInput (div)
        const originalBgColor = displaylv.style.backgroundColor;
        const originalEurBgColor = display.style.backgroundColor; // –ó–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ñ–æ–Ω –Ω–∞ eurInput (div)
        // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –∏ –ø–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –æ—Ç –ø–∞–º–µ—Ç—Ç–∞
        const memValueStr = groupByThree(formatNumber(Mem[slot]));
        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –≤ eurInput (div)
        display.textContent = memValueStr;
        adjustFontSize(displaylv, display);
        display.style.backgroundColor = 'rgba(255, 223, 186, 0.5)'; // –°–≤–µ—Ç–ª–æ –æ—Ä–∞–Ω–∂–µ–≤–æ –∑–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏—è
        // –í—Ä—ä—â–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥ 3 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            display.textContent = originalEurValue;
            display.style.backgroundColor = originalEurBgColor;
        }, 1000);
    }

    function memoryRecall(slot) {
        // Guard clause: –Ω–µ –ø—Ä–æ–º–µ–Ω—è–º–µ, –∞–∫–æ –ø–∞–º–µ—Ç—Ç–∞ –µ –ø—Ä–∞–∑–Ω–∞ –∏–ª–∏ –∞–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –≤–µ—á–µ –µ –≤—ä–≤–µ–ª —á–∏—Å–ª–æ
        if (Mem[slot] === undefined || Mem[slot] === 0 || (userInput !== "" && !(/[+\-*/√ó√∑]$/.test(userInput)))) {
            return;
        }
        const valueStr = Mem[slot].toString().replace('.', ',');
        userInput += valueStr; // –î–æ–±–∞–≤—è–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –æ—Ç –ø–∞–º–µ—Ç—Ç–∞ –∫—ä–º —Ç–µ–∫—É—â–∏—è –≤—Ö–æ–¥
        const isExpression = /[+\-*/√ó√∑(]/.test(userInput);
        // –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–æ–π –¥–∏—Å–ø–ª–µ–π –µ –ø—ä—Ä–≤–∏—á–µ–Ω –∏ –∫–æ–π –≤—Ç–æ—Ä–∏—á–µ–Ω, –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–∞ –∫–æ–¥
        const primaryDisplay = levMode ? displaylv : display;
        const secondaryDisplay = levMode ? display : displaylv;
        const conversionFunction = levMode ? convertFromLevToEur : convertFromEurToLev;
        if (isExpression) {
            // –ê–∫–æ –µ –∏–∑—Ä–∞–∑, –ø–æ–∫–∞–∑–≤–∞–º–µ –≥–æ –≤ –ø—ä—Ä–≤–∏—á–Ω–∏—è –¥–∏—Å–ø–ª–µ–π –∏ –∏–∑—á–∏—Å—Ç–≤–∞–º–µ –≤—Ç–æ—Ä–∏—á–Ω–∏—è
            primaryDisplay.textContent = userInput.replace(/\*/g, "√ó").replace(/\//g, "√∑");
            secondaryDisplay.textContent = "";
        } else {
            // –ê–∫–æ –µ —á–∏—Å–ª–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –≥–æ –∏ –ø–æ–∫–∞–∑–≤–∞–º–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
            primaryDisplay.textContent = groupByThree(userInput, true);
            secondaryDisplay.textContent = groupByThree(conversionFunction(userInput, true));
        }
        console.log(`üìü MR –æ—Ç Mem[${slot}] ‚Üí "${valueStr}" ‚Üí –Ω–æ–≤ userInput: "${userInput}"`);
        adjustFontSize(displaylv, display);
        updateMemoryStatusDisplay(slot, false); // –í—Ä—ä—â–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ñ–æ–Ω –≤–µ–¥–Ω–∞–≥–∞ –ø—Ä–∏ –∏–∑–≤–∏–∫–≤–∞–Ω–µ
    }

    function clearStatus(sArea) {
        const statusId = typeof sArea === "number" ? `statusArea${sArea}` : sArea;
        const status = document.getElementById(statusId);
        if (!status) return;
        status.style.opacity = "0";
    }
